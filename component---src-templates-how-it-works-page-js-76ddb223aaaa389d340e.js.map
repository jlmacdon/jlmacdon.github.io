{"version":3,"file":"component---src-templates-how-it-works-page-js-76ddb223aaaa389d340e.js","mappings":"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","sources":["webpack://gatsby-starter-netlify-cms/./src/components/FullWidthImage.js","webpack://gatsby-starter-netlify-cms/./src/components/PreviewCompatibleImage.js","webpack://gatsby-starter-netlify-cms/./src/components/Tile.js","webpack://gatsby-starter-netlify-cms/./src/templates/how-it-works-page.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nexport default function FullWidthImage(props) {\n  const {\n    height = \"30rem\",\n    img,\n    title,\n    subheading,\n    imgPosition = \"top left\",\n  } = props;\n  \n  return (\n    <React.Fragment>\n      <div\n        className=\"margin-top-0\"\n        style={{\n          display: \"grid\",\n          alignItems: \"center\",\n        }}\n      >\n        {img?.url ? (\n          <img\n            src={img}\n            objectFit={\"cover\"}\n            objectPosition={imgPosition}\n            style={{\n              gridArea: \"1/1\",\n              // You can set a maximum height for the image, if you wish.\n              height: height,\n              width: \"100%\",\n            }}\n            // You can optionally force an aspect ratio for the generated image\n            aspectratio={3 / 1}\n            // This is a presentational image, so the alt should be an empty string\n            alt=\"\"\n            formats={[\"auto\", \"webp\", \"avif\"]}\n          />\n        ) : (\n          <GatsbyImage\n            image={img}\n            objectFit={\"cover\"}\n            objectPosition={imgPosition}\n            style={{\n              gridArea: \"1/1\",\n              // You can set a maximum height for the image, if you wish.\n              maxHeight: height,\n            }}\n            layout=\"fullWidth\"\n            // You can optionally force an aspect ratio for the generated image\n            aspectratio={3 / 1}\n            // This is a presentational image, so the alt should be an empty string\n            alt=\"\"\n            formats={[\"auto\", \"webp\", \"avif\"]}\n          />\n        )}\n        {(title || subheading) && (\n          <div\n            style={{\n              // By using the same grid area for both, they are stacked on top of each other\n              gridArea: \"1/1\",\n              position: \"relative\",\n              // This centers the other elements inside the hero component\n              placeItems: \"center\",\n              display: \"grid\",\n            }}\n          >\n            {/* Any content here will be centered in the component */}\n            {title && (\n              <h1\n                className=\"is-size-1-desktop\"\n                style={{\n                  boxShadow:\n                    \"rgba(69, 142, 204, 0.95) 0.5rem 0px 0px, rgba(69, 142, 204, 0.95) -0.5rem 0px 0px\",\n                  backgroundColor: \"rgba(69, 142, 204, 0.95)\",\n                  color: \"white\",\n                  lineHeight: \"1\",\n                  padding: \"1rem\",\n                  borderRadius: \"0.5rem\",\n                  textAlign: \"center\",\n                }}\n              >\n                {title}\n              </h1>\n            )}\n            {subheading && (\n              <h3\n                className=\"is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\n                style={{\n                  boxShadow:\n                    \"rgba(69, 142, 204, 0.95) 0.5rem 0px 0px, rgba(69, 142, 204, 0.95) -0.5rem 0px 0px\",\n                  backgroundColor: \"rgba(69, 142, 204, 0.95)\",\n                  color: \"white\",\n                  lineHeight: \"1\",\n                  padding: \"0.25rem\",\n                  marginTop: \"0.5rem\",\n                  borderRadius: \"0.375rem\",\n                }}\n              >\n                {subheading}\n              </h3>\n            )}\n          </div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n}\n\nFullWidthImage.propTypes = {\n  img: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  height: PropTypes.number,\n  subheading: PropTypes.string,\n};\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst PreviewCompatibleImage = ({ imageInfo, radius }) => {\n  const imageStyle = { borderRadius: radius ? radius : \"5px\" };\n\n  const { alt = \"\", childImageSharp, image } = imageInfo;\n\n  if (!!image && !!image.childImageSharp) {\n    return (\n      <GatsbyImage\n        image={image.childImageSharp.gatsbyImageData}\n        style={imageStyle}\n        alt={alt}\n      />\n    );\n  } else if (!!childImageSharp) {\n    return (\n      <GatsbyImage\n        image={childImageSharp.gatsbyImageData}\n        style={imageStyle}\n        alt={alt}\n      />\n    );\n    // for Netlify CMS \n  } else if (image) {\n    return <img style={{imageStyle}} src={image} alt={alt} />;\n  } else {\n    return null\n  }\n};\n\nPreviewCompatibleImage.propTypes = {\n  imageInfo: PropTypes.shape({\n    alt: PropTypes.string,\n    childImageSharp: PropTypes.object,\n    image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n    style: PropTypes.object,\n  }).isRequired,\n};\n\nexport default PreviewCompatibleImage;\n","import * as React from \"react\"\nimport PropTypes from \"prop-types\"\nimport PreviewCompatibleImage from \"../components/PreviewCompatibleImage\"\n\nexport const Tile = ({ icon, name, description }) => {\n  return (\n    <div className=\"tile-content\">\n      <div className=\"feature-img\">\n        <PreviewCompatibleImage imageInfo={{ image: icon, alt: name }}/>\n      </div>\n      <h2>{name}</h2>\n      <div className=\"med-text process-text\">{description.split('>-').map(line => <div>{line}</div>)}</div>\n    </div>\n  )\n}\n\nTile.propTypes = {\n  icon: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  name: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default Tile;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport { getImage } from \"gatsby-plugin-image\";\nimport Layout from \"../components/Layout\";\nimport FullWidthImage from \"../components/FullWidthImage\";\nimport Tile from '../components/Tile'\n\n// eslint-disable-next-line\nexport const HowItWorksPageTemplate = ({\n  image,\n  title,\n  mainpitch,\n  process,\n}) => {\n  const heroImage = getImage(image) || image;\n\n  return (\n    <div>\n      <FullWidthImage img={heroImage} title={title} />\n      <div className=\"column is-10 is-offset-1 padding-unset has-text-centered\">\n        <section>\n          <h2 className=\"has-text-weight-bold \">{mainpitch.title}</h2>\n          <div className=\"med-text\">{mainpitch.description}</div>\n        </section>\n        <section>\n          <div className=\"columns is-multiline section-padding\">\n            <div className=\"column padding-unset column-left\">\n              {process.map(({ processIcon, processName, processDescription }) => {\n                return <Tile icon={processIcon} name={processName} description={processDescription} />\n              })}\n            </div>\n            <div className=\"column padding-unset column-right\">\n              {process.map(({ benefitsIcon, benefitsName, benefitsDescription }) => {\n                return <Tile icon={benefitsIcon} name={benefitsName} description={benefitsDescription} />\n              })}\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nHowItWorksPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string.isRequired,\n  subtitle: PropTypes.string.isRequired,\n  heading: PropTypes.string,\n  description: PropTypes.string,\n};\n\nconst HowItWorksPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark;\n\n  return (\n    <Layout>\n      <HowItWorksPageTemplate\n        title={frontmatter.title}\n        image={frontmatter.image}\n        mainpitch={frontmatter.mainpitch}\n        process={frontmatter.process}\n      />\n    </Layout>\n  );\n};\n\nHowItWorksPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n};\n\nexport default HowItWorksPage;\n\nexport const howItWorksPageQuery = graphql`\n  query HowItWorksPage($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            gatsbyImageData(quality: 100, layout: FULL_WIDTH)\n          }\n        }\n        mainpitch {\n          title\n          description\n        }\n        process {\n          processIcon {\n            childImageSharp {\n              gatsbyImageData(width: 60, quality: 100, layout: FULL_WIDTH)\n            }\n          }\n          processName\n          processDescription\n          benefitsIcon {\n            childImageSharp {\n              gatsbyImageData(width: 60, quality: 100, layout: FULL_WIDTH)\n            }\n          }\n          benefitsName\n          benefitsDescription\n        }\n      }\n    }\n  }\n`;\n"],"names":["FullWidthImage","props","height","img","title","subheading","imgPosition","className","style","display","alignItems","url","src","objectFit","objectPosition","gridArea","width","aspectratio","alt","formats","G","image","maxHeight","layout","position","placeItems","boxShadow","backgroundColor","color","lineHeight","padding","borderRadius","textAlign","marginTop","imageInfo","radius","imageStyle","childImageSharp","gatsbyImageData","icon","name","description","PreviewCompatibleImage","split","map","line","HowItWorksPageTemplate","mainpitch","process","heroImage","getImage","processIcon","processName","processDescription","benefitsIcon","benefitsName","benefitsDescription","frontmatter","data","markdownRemark","Layout"],"sourceRoot":""}