{"version":3,"file":"component---src-templates-index-page-js-3b144ff1d90431e23b08.js","mappings":"oMAIe,SAASA,EAAeC,GACrC,MAMIA,EALFC,OAAAA,OADF,MACW,QADX,EAEEC,EAIEF,EAJFE,IACAC,EAGEH,EAHFG,MACAC,EAEEJ,EAFFI,WAJF,EAMIJ,EADFK,YAAAA,OALF,MAKgB,WALhB,EAQA,OACE,gBAAC,WAAD,KACE,uBACEC,UAAU,eACVC,MAAO,CACLC,QAAS,OACTC,WAAY,WAGbP,MAAAA,GAAAA,EAAKQ,IACJ,uBACEC,IAAKT,EACLU,UAAW,QACXC,eAAgBR,EAChBE,MAAO,CACLO,SAAU,MAEVb,OAAQA,EACRc,MAAO,QAGTC,YAAa,EAEbC,IAAI,GACJC,QAAS,CAAC,OAAQ,OAAQ,UAG5B,gBAAC,EAAAC,EAAD,CACEC,MAAOlB,EACPU,UAAW,QACXC,eAAgBR,EAChBE,MAAO,CACLO,SAAU,MAEVO,UAAWpB,GAEbqB,OAAO,YAEPN,YAAa,EAEbC,IAAI,GACJC,QAAS,CAAC,OAAQ,OAAQ,WAG5Bf,GAASC,IACT,uBACEG,MAAO,CAELO,SAAU,MACVS,SAAU,WAEVC,WAAY,SACZhB,QAAS,SAIVL,GACC,sBACEG,UAAU,oBACVC,MAAO,CACLkB,UACE,oFACFC,gBAAiB,2BACjBC,MAAO,QACPC,WAAY,IACZC,QAAS,OACTC,aAAc,SACdC,UAAW,WAGZ5B,GAGJC,GACC,sBACEE,UAAU,yDACVC,MAAO,CACLkB,UACE,oFACFC,gBAAiB,2BACjBC,MAAO,QACPC,WAAY,IACZC,QAAS,UACTG,UAAW,SACXF,aAAc,aAGf1B,Q,4CC1DjB,IAtC+B,SAAC,GAA2B,IAAzB6B,EAAwB,EAAxBA,UAAWC,EAAa,EAAbA,OACrCC,EAAa,CAAEL,aAAcI,GAAkB,OAErD,EAA6CD,EAArChB,IAAAA,OAAR,MAAc,GAAd,EAAkBmB,EAA2BH,EAA3BG,gBAAiBhB,EAAUa,EAAVb,MAEnC,OAAMA,GAAWA,EAAMgB,gBAEnB,gBAAC,EAAAjB,EAAD,CACEC,MAAOA,EAAMgB,gBAAgBC,gBAC7B9B,MAAO4B,EACPlB,IAAKA,IAGEmB,EAET,gBAAC,EAAAjB,EAAD,CACEC,MAAOgB,EAAgBC,gBACvB9B,MAAO4B,EACPlB,IAAKA,IAIAG,EACF,uBAAKb,MAAO,CAAC4B,WAAAA,GAAaxB,IAAKS,EAAOH,IAAKA,IAE3C,O,mJCDX,EAxBoB,SAAC,GAAD,IAAGqB,EAAH,EAAGA,UAAH,OAClB,uBAAKhC,UAAU,sDACZgC,EAAUC,KAAI,SAACC,GAAD,OACb,uBAAKC,IAAKD,EAAKE,KAAMpC,UAAU,2CAC3B,uBAAKA,UAAU,qBACb,uBAAKA,UAAU,eACb,gBAACqC,EAAA,EAAD,CAAwBV,UAAWO,MAGvC,uBAAKlC,UAAU,YAAYkC,EAAKE,Y,UCkB1C,EA5BqB,SAAC,GAAsB,IAApBE,EAAmB,EAAnBA,aACtB,OACA,uBAAKtC,UAAU,wBACZsC,EAAaL,KAAI,gBAAGM,EAAH,EAAGA,OAAQC,EAAX,EAAWA,YAAaC,EAAxB,EAAwBA,MAAxB,OACd,uBACEzC,UAAU,2CACVmC,IAAKI,GAEL,uBAAKvC,UAAU,YACb,2BAAMyC,GACN,iCAASF,GACT,2BAAMC,UCHLE,EAAoB,SAAC,GAM3B,IALL5B,EAKI,EALJA,MACAjB,EAII,EAJJA,MACA8C,EAGI,EAHJA,UACAC,EAEI,EAFJA,SACAN,EACI,EADJA,aAEMO,GAAYC,EAAAA,EAAAA,GAAShC,IAAUA,EAErC,OACE,2BACE,gBAACrB,EAAA,EAAD,CAAgBG,IAAKiD,EAAWhD,MAAOA,IACvC,uBAAKG,UAAU,4DACb,+BACI,sBAAIA,UAAU,wBAAwB2C,EAAU9C,OAChD,uBAAKG,UAAU,YAAY2C,EAAUH,cAEzC,+BACE,sBAAIxC,UAAU,wBAAwB4C,EAASG,SAC/C,gBAACC,EAAD,CAAUhB,UAAWY,EAASK,UAEhC,+BACI,sBAAIjD,UAAU,wBAAwBsC,EAAaS,SACnD,uBAAK/C,UAAU,uCACb,gBAAC,EAAD,CAAcsC,aAAcA,EAAaY,eA8CvD,EAxBkB,SAAC,GAAc,IACvBC,EADsB,EAAXC,KACUC,eAArBF,YAER,OACE,gBAACG,EAAA,EAAD,KACE,gBAACZ,EAAD,CACE5B,MAAOqC,EAAYrC,MACnBjB,MAAOsD,EAAYtD,MACnB8C,UAAWQ,EAAYR,UACvBC,SAAUO,EAAYP,SACtBN,aAAca,EAAYb","sources":["webpack://gatsby-starter-netlify-cms/./src/components/FullWidthImage.js","webpack://gatsby-starter-netlify-cms/./src/components/PreviewCompatibleImage.js","webpack://gatsby-starter-netlify-cms/./src/components/Features.js","webpack://gatsby-starter-netlify-cms/./src/components/Testimonials.js","webpack://gatsby-starter-netlify-cms/./src/templates/index-page.js"],"sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nexport default function FullWidthImage(props) {\n  const {\n    height = \"30rem\",\n    img,\n    title,\n    subheading,\n    imgPosition = \"top left\",\n  } = props;\n  \n  return (\n    <React.Fragment>\n      <div\n        className=\"margin-top-0\"\n        style={{\n          display: \"grid\",\n          alignItems: \"center\",\n        }}\n      >\n        {img?.url ? (\n          <img\n            src={img}\n            objectFit={\"cover\"}\n            objectPosition={imgPosition}\n            style={{\n              gridArea: \"1/1\",\n              // You can set a maximum height for the image, if you wish.\n              height: height,\n              width: \"100%\",\n            }}\n            // You can optionally force an aspect ratio for the generated image\n            aspectratio={3 / 1}\n            // This is a presentational image, so the alt should be an empty string\n            alt=\"\"\n            formats={[\"auto\", \"webp\", \"avif\"]}\n          />\n        ) : (\n          <GatsbyImage\n            image={img}\n            objectFit={\"cover\"}\n            objectPosition={imgPosition}\n            style={{\n              gridArea: \"1/1\",\n              // You can set a maximum height for the image, if you wish.\n              maxHeight: height,\n            }}\n            layout=\"fullWidth\"\n            // You can optionally force an aspect ratio for the generated image\n            aspectratio={3 / 1}\n            // This is a presentational image, so the alt should be an empty string\n            alt=\"\"\n            formats={[\"auto\", \"webp\", \"avif\"]}\n          />\n        )}\n        {(title || subheading) && (\n          <div\n            style={{\n              // By using the same grid area for both, they are stacked on top of each other\n              gridArea: \"1/1\",\n              position: \"relative\",\n              // This centers the other elements inside the hero component\n              placeItems: \"center\",\n              display: \"grid\",\n            }}\n          >\n            {/* Any content here will be centered in the component */}\n            {title && (\n              <h1\n                className=\"is-size-1-desktop\"\n                style={{\n                  boxShadow:\n                    \"rgba(69, 142, 204, 0.95) 0.5rem 0px 0px, rgba(69, 142, 204, 0.95) -0.5rem 0px 0px\",\n                  backgroundColor: \"rgba(69, 142, 204, 0.95)\",\n                  color: \"white\",\n                  lineHeight: \"1\",\n                  padding: \"1rem\",\n                  borderRadius: \"0.5rem\",\n                  textAlign: \"center\",\n                }}\n              >\n                {title}\n              </h1>\n            )}\n            {subheading && (\n              <h3\n                className=\"is-size-5-mobile is-size-5-tablet is-size-4-widescreen\"\n                style={{\n                  boxShadow:\n                    \"rgba(69, 142, 204, 0.95) 0.5rem 0px 0px, rgba(69, 142, 204, 0.95) -0.5rem 0px 0px\",\n                  backgroundColor: \"rgba(69, 142, 204, 0.95)\",\n                  color: \"white\",\n                  lineHeight: \"1\",\n                  padding: \"0.25rem\",\n                  marginTop: \"0.5rem\",\n                  borderRadius: \"0.375rem\",\n                }}\n              >\n                {subheading}\n              </h3>\n            )}\n          </div>\n        )}\n      </div>\n    </React.Fragment>\n  );\n}\n\nFullWidthImage.propTypes = {\n  img: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  title: PropTypes.string,\n  height: PropTypes.number,\n  subheading: PropTypes.string,\n};\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { GatsbyImage } from \"gatsby-plugin-image\";\n\nconst PreviewCompatibleImage = ({ imageInfo, radius }) => {\n  const imageStyle = { borderRadius: radius ? radius : \"5px\" };\n\n  const { alt = \"\", childImageSharp, image } = imageInfo;\n\n  if (!!image && !!image.childImageSharp) {\n    return (\n      <GatsbyImage\n        image={image.childImageSharp.gatsbyImageData}\n        style={imageStyle}\n        alt={alt}\n      />\n    );\n  } else if (!!childImageSharp) {\n    return (\n      <GatsbyImage\n        image={childImageSharp.gatsbyImageData}\n        style={imageStyle}\n        alt={alt}\n      />\n    );\n    // for Netlify CMS \n  } else if (image) {\n    return <img style={{imageStyle}} src={image} alt={alt} />;\n  } else {\n    return null\n  }\n};\n\nPreviewCompatibleImage.propTypes = {\n  imageInfo: PropTypes.shape({\n    alt: PropTypes.string,\n    childImageSharp: PropTypes.object,\n    image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n    style: PropTypes.object,\n  }).isRequired,\n};\n\nexport default PreviewCompatibleImage;\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\nimport PreviewCompatibleImage from \"../components/PreviewCompatibleImage\";\n\nconst FeatureGrid = ({ gridItems }) => (\n  <div className=\"columns is-multiline has-text-centered is-centered\">\n    {gridItems.map((item) => (\n      <div key={item.text} className=\"column is-6 feature-grid padding-offset\">\n          <div className=\"has-text-centered\">\n            <div className=\"feature-img\">\n              <PreviewCompatibleImage imageInfo={item} />\n            </div>\n          </div>\n          <div className=\"med-text\">{item.text}</div>\n      </div>\n    ))}\n  </div>\n);\n\nFeatureGrid.propTypes = {\n  gridItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      text: PropTypes.string,\n    })\n  ),\n};\n\nexport default FeatureGrid;\n","import * as React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Testimonials = ({ testimonials }) => {\n  return (\n  <div className=\"columns is-multiline\">\n    {testimonials.map(({ author, description, quote }) => (\n        <div\n          className=\"column is-6 is-full-tablet padding-unset\"\n          key={author}\n        >\n          <div className=\"med-text\">\n            <div>{quote}</div>\n            <div> â€“ {author}</div>\n            <div>{description}</div>\n          </div>\n        </div>\n    ))}\n  </div>)\n};\n\nTestimonials.propTypes = {\n  testimonials: PropTypes.arrayOf(\n    PropTypes.shape({\n      quote: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      description: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Testimonials;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\nimport { getImage } from \"gatsby-plugin-image\";\n\nimport Layout from \"../components/Layout\";\nimport Features from \"../components/Features\";\nimport FullWidthImage from \"../components/FullWidthImage\";\nimport Testimonials from \"../components/Testimonials\";\n\n// eslint-disable-next-line\nexport const IndexPageTemplate = ({\n  image,\n  title,\n  mainpitch,\n  benefits,\n  testimonials,\n}) => {\n  const heroImage = getImage(image) || image;\n\n  return (\n    <div>\n      <FullWidthImage img={heroImage} title={title} />\n      <div className=\"column is-10 is-offset-1 has-text-centered padding-unset\">\n        <section>\n            <h2 className=\"has-text-weight-bold\">{mainpitch.title}</h2>\n            <div className=\"med-text\">{mainpitch.description}</div>\n        </section>\n        <section>\n          <h2 className=\"has-text-weight-bold\">{benefits.heading}</h2>\n          <Features gridItems={benefits.blurbs} />\n        </section>\n        <section>\n            <h2 className=\"has-text-weight-bold\">{testimonials.heading}</h2>\n            <div className=\"section-padding section-padding-top\">\n              <Testimonials testimonials={testimonials.reviews} />\n            </div>\n        </section>\n      </div>\n    </div>\n  );\n};\n\nIndexPageTemplate.propTypes = {\n  image: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  title: PropTypes.string.isRequired,\n  mainpitch: PropTypes.object.isRequired,\n  benefits: PropTypes.shape({\n    heading: PropTypes.string.isRequired,\n    blurbs: PropTypes.array.isRequired,\n  }).isRequired,\n  testimonials: PropTypes.shape({\n    heading: PropTypes.string.isRequired,\n    reviews: PropTypes.array.isRequired,\n  }).isRequired,\n};\n\nconst IndexPage = ({ data }) => {\n  const { frontmatter } = data.markdownRemark;\n\n  return (\n    <Layout>\n      <IndexPageTemplate\n        image={frontmatter.image}\n        title={frontmatter.title}\n        mainpitch={frontmatter.mainpitch}\n        benefits={frontmatter.benefits}\n        testimonials={frontmatter.testimonials}\n      />\n    </Layout>\n  );\n};\n\nIndexPage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.shape({\n      frontmatter: PropTypes.object,\n    }),\n  }),\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query IndexPageTemplate {\n    markdownRemark(frontmatter: { templateKey: { eq: \"index-page\" } }) {\n      frontmatter {\n        title\n        image {\n          childImageSharp {\n            gatsbyImageData(quality: 100, layout: FULL_WIDTH)\n          }\n        }\n        mainpitch {\n          title\n          description\n        }\n        benefits {\n          heading\n          blurbs {\n            image {\n              childImageSharp {\n                gatsbyImageData(width: 120, quality: 64, layout: CONSTRAINED)\n              }\n            }\n            text\n          }\n        }\n        testimonials {\n          heading\n          reviews {\n            author\n            description\n            quote\n          }\n        }\n      }\n    }\n  }\n`;\n"],"names":["FullWidthImage","props","height","img","title","subheading","imgPosition","className","style","display","alignItems","url","src","objectFit","objectPosition","gridArea","width","aspectratio","alt","formats","G","image","maxHeight","layout","position","placeItems","boxShadow","backgroundColor","color","lineHeight","padding","borderRadius","textAlign","marginTop","imageInfo","radius","imageStyle","childImageSharp","gatsbyImageData","gridItems","map","item","key","text","PreviewCompatibleImage","testimonials","author","description","quote","IndexPageTemplate","mainpitch","benefits","heroImage","getImage","heading","Features","blurbs","reviews","frontmatter","data","markdownRemark","Layout"],"sourceRoot":""}